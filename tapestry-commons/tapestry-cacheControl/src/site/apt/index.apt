Cache Control

 This module add the ability to control the caching of your tapestry pages by simply annotating the
 page class.

+--
  @CacheControl(cacheType = CacheType.NEVER)
  public class myPage(){

    ....

  }

+--

Cache Type

 This library supports the following cachetypes

 * NEVER - Never cache the page

 * SHORT - A short time (default 5 minutes)

 * MEDIUM - A medium time (default 1 hour)

 * LONG - A long time (default 1 day)

 * FAR_FUTURE - Cache the page for a extremely long time (default 10 years)
 
 * NONE - Don't do anything to this page

 The cache types are configured via application defaults so you can override them by contributing your own preferences. The time parameter is in seconds.

+--
 public static void contributeApplicationDefaults(MappedConfiguration<String,String> configuration)
  {
    configuration.add(cacheControl.short, "60");
    configuration.add(cacheControl.medium, "600");
    configuration.add(cacheControl.long, "6000");
    configuration.add(cacheControl.farFuture, "60000");
  }
+--

Default Cache Type

 The library also has a default cache header applied to all pages. This default is set (by default) to NEVER.
 This can also be changed by contributing a default

+--
     configuration.add(CacheControlTransformer.CACHE_TYPE_METADATA, CacheType.NONE);
+--

AJAX Event Caching

 It is possible to set and use cache control headers on AJAX events. This can be very handy as they can cause substantial
 load. However this also comes with a health warning - you need to think
 carefully before enabling this as if you do it wrong you could share data between users!

 You need to enable this by add the following application default

+--
	configuration.add("cacheControl.enableEventHeaders", String.valueOf(true));
+--

 This will enable setting cache control headers for AJAX events. This will change all tapestry AJAX events to use a GET
 instead of a post.

 The headers set will be

 * By Default the system wide default (which is no headers unless you change it)

 * If the page has an annotation is will set those

 * If the event needs to overide the page annotation you can inject CacheControlSupport and set the desired header

+--
    public Block onActionFromNoneAjax() {

		cacheControlSupport.setCacheType(CacheType.NONE);
		return ajaxResponse;
	}
+--


Implementation Notes

* Headers

 The library seeks to use headers that will work with many proxy servers/browsers so it sets

 * Expires

 * Cache Control
 
 * Pragma='no-cache'

* Ajax Event

 The ajax event implementation overides the ajaxRequest function is tapestry.js to change the default method to GET (as
 opposed to POST). This is a global setting so once enabled will impact ALL ajax requests.

 This is done as part of page
 initialisation - it is not therefore guarenteed if you called Tapestry.ajaxRequest in an included JS file it will run
 after (or before) this overide occurs. In reality this is unlikely to be an issue as AJAX doesn't generally occur on page
 load - and if you wanted to do that putting your call in an init function should solve the issue.

 One side effect of changing from POST to GET is all AJAX requests will need cache headers to stop them being cached. Therefore
 is you enable AJAX caching you should change the default cacheType to be NEVER in your application defaults

+--
      configuration.add(CacheControlTransformer.CACHE_TYPE_METADATA, CacheType.NEVER);
+--
